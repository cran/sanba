// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// main_vb_cam_cpp
Rcpp::List main_vb_cam_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, double const a_tilde, double const b_tilde, double const a_bar, double const b_bar, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _sanba_main_vb_cam_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP a_tildeSEXP, SEXP b_tildeSEXP, SEXP a_barSEXP, SEXP b_barSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< double const >::type a_tilde(a_tildeSEXP);
    Rcpp::traits::input_parameter< double const >::type b_tilde(b_tildeSEXP);
    Rcpp::traits::input_parameter< double const >::type a_bar(a_barSEXP);
    Rcpp::traits::input_parameter< double const >::type b_bar(b_barSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_cam_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, a_tilde, b_tilde, a_bar, b_bar, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}
// main_vb_cam_CP_cpp
Rcpp::List main_vb_cam_CP_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, arma::colvec conc_hyper, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _sanba_main_vb_cam_CP_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP conc_hyperSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type conc_hyper(conc_hyperSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_cam_CP_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, conc_hyper, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}
// main_vb_fSAN_cpp
Rcpp::List main_vb_fSAN_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, double alpha_bar, double beta_bar, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _sanba_main_vb_fSAN_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP alpha_barSEXP, SEXP beta_barSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_bar(alpha_barSEXP);
    Rcpp::traits::input_parameter< double >::type beta_bar(beta_barSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_fSAN_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, alpha_bar, beta_bar, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}
// main_vb_fiSAN_cpp
Rcpp::List main_vb_fiSAN_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, double const a_tilde, double const b_tilde, double beta_bar, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _sanba_main_vb_fiSAN_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP a_tildeSEXP, SEXP b_tildeSEXP, SEXP beta_barSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< double const >::type a_tilde(a_tildeSEXP);
    Rcpp::traits::input_parameter< double const >::type b_tilde(b_tildeSEXP);
    Rcpp::traits::input_parameter< double >::type beta_bar(beta_barSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_fiSAN_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, a_tilde, b_tilde, beta_bar, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}
// main_vb_fiSAN_CP_cpp
Rcpp::List main_vb_fiSAN_CP_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, arma::colvec conc_hyper, double beta_bar, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _sanba_main_vb_fiSAN_CP_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP conc_hyperSEXP, SEXP beta_barSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type conc_hyper(conc_hyperSEXP);
    Rcpp::traits::input_parameter< double >::type beta_bar(beta_barSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_fiSAN_CP_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, conc_hyper, beta_bar, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sample_CAM_cpp
Rcpp::List sample_CAM_cpp(int nrep, int burn, const arma::vec& y, const arma::vec& group, int maxK, int maxL, double m0, double tau0, double lambda0, double gamma0, bool fixed_alpha, bool fixed_beta, double alpha, double beta, double hyp_alpha1, double hyp_alpha2, double hyp_beta1, double hyp_beta2, arma::vec mu_start, arma::vec sigma2_start, arma::vec M_start, arma::vec S_start, double alpha_start, double beta_start, bool progressbar);
RcppExport SEXP _sanba_sample_CAM_cpp(SEXP nrepSEXP, SEXP burnSEXP, SEXP ySEXP, SEXP groupSEXP, SEXP maxKSEXP, SEXP maxLSEXP, SEXP m0SEXP, SEXP tau0SEXP, SEXP lambda0SEXP, SEXP gamma0SEXP, SEXP fixed_alphaSEXP, SEXP fixed_betaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP hyp_alpha1SEXP, SEXP hyp_alpha2SEXP, SEXP hyp_beta1SEXP, SEXP hyp_beta2SEXP, SEXP mu_startSEXP, SEXP sigma2_startSEXP, SEXP M_startSEXP, SEXP S_startSEXP, SEXP alpha_startSEXP, SEXP beta_startSEXP, SEXP progressbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrep(nrepSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< int >::type maxL(maxLSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< bool >::type fixed_alpha(fixed_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type fixed_beta(fixed_betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type hyp_alpha1(hyp_alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type hyp_alpha2(hyp_alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type hyp_beta1(hyp_beta1SEXP);
    Rcpp::traits::input_parameter< double >::type hyp_beta2(hyp_beta2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_start(mu_startSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2_start(sigma2_startSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type M_start(M_startSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S_start(S_startSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_start(alpha_startSEXP);
    Rcpp::traits::input_parameter< double >::type beta_start(beta_startSEXP);
    Rcpp::traits::input_parameter< bool >::type progressbar(progressbarSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_CAM_cpp(nrep, burn, y, group, maxK, maxL, m0, tau0, lambda0, gamma0, fixed_alpha, fixed_beta, alpha, beta, hyp_alpha1, hyp_alpha2, hyp_beta1, hyp_beta2, mu_start, sigma2_start, M_start, S_start, alpha_start, beta_start, progressbar));
    return rcpp_result_gen;
END_RCPP
}
// sample_fiSAN_cpp
Rcpp::List sample_fiSAN_cpp(int nrep, int burn, const arma::vec& y, const arma::vec& group, int maxK, int maxL, double m0, double tau0, double lambda0, double gamma0, double alpha, double beta, double hyp_alpha1, double hyp_alpha2, bool fixed_alpha, arma::vec mu_start, arma::vec sigma2_start, arma::vec M_start, arma::vec S_start, bool progressbar);
RcppExport SEXP _sanba_sample_fiSAN_cpp(SEXP nrepSEXP, SEXP burnSEXP, SEXP ySEXP, SEXP groupSEXP, SEXP maxKSEXP, SEXP maxLSEXP, SEXP m0SEXP, SEXP tau0SEXP, SEXP lambda0SEXP, SEXP gamma0SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP hyp_alpha1SEXP, SEXP hyp_alpha2SEXP, SEXP fixed_alphaSEXP, SEXP mu_startSEXP, SEXP sigma2_startSEXP, SEXP M_startSEXP, SEXP S_startSEXP, SEXP progressbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrep(nrepSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< int >::type maxL(maxLSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type hyp_alpha1(hyp_alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type hyp_alpha2(hyp_alpha2SEXP);
    Rcpp::traits::input_parameter< bool >::type fixed_alpha(fixed_alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_start(mu_startSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2_start(sigma2_startSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type M_start(M_startSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S_start(S_startSEXP);
    Rcpp::traits::input_parameter< bool >::type progressbar(progressbarSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_fiSAN_cpp(nrep, burn, y, group, maxK, maxL, m0, tau0, lambda0, gamma0, alpha, beta, hyp_alpha1, hyp_alpha2, fixed_alpha, mu_start, sigma2_start, M_start, S_start, progressbar));
    return rcpp_result_gen;
END_RCPP
}
// sample_fSAN_cpp
Rcpp::List sample_fSAN_cpp(int nrep, int burn, const arma::vec& y, const arma::vec& group, int maxK, int maxL, double m0, double tau0, double lambda0, double gamma0, double alpha, double beta, arma::vec mu_start, arma::vec sigma2_start, arma::vec M_start, arma::vec S_start, bool progressbar);
RcppExport SEXP _sanba_sample_fSAN_cpp(SEXP nrepSEXP, SEXP burnSEXP, SEXP ySEXP, SEXP groupSEXP, SEXP maxKSEXP, SEXP maxLSEXP, SEXP m0SEXP, SEXP tau0SEXP, SEXP lambda0SEXP, SEXP gamma0SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP mu_startSEXP, SEXP sigma2_startSEXP, SEXP M_startSEXP, SEXP S_startSEXP, SEXP progressbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrep(nrepSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< int >::type maxL(maxLSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_start(mu_startSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2_start(sigma2_startSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type M_start(M_startSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S_start(S_startSEXP);
    Rcpp::traits::input_parameter< bool >::type progressbar(progressbarSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_fSAN_cpp(nrep, burn, y, group, maxK, maxL, m0, tau0, lambda0, gamma0, alpha, beta, mu_start, sigma2_start, M_start, S_start, progressbar));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sanba_main_vb_cam_cpp", (DL_FUNC) &_sanba_main_vb_cam_cpp, 22},
    {"_sanba_main_vb_cam_CP_cpp", (DL_FUNC) &_sanba_main_vb_cam_CP_cpp, 19},
    {"_sanba_main_vb_fSAN_cpp", (DL_FUNC) &_sanba_main_vb_fSAN_cpp, 20},
    {"_sanba_main_vb_fiSAN_cpp", (DL_FUNC) &_sanba_main_vb_fiSAN_cpp, 21},
    {"_sanba_main_vb_fiSAN_CP_cpp", (DL_FUNC) &_sanba_main_vb_fiSAN_CP_cpp, 20},
    {"_sanba_sample_CAM_cpp", (DL_FUNC) &_sanba_sample_CAM_cpp, 25},
    {"_sanba_sample_fiSAN_cpp", (DL_FUNC) &_sanba_sample_fiSAN_cpp, 20},
    {"_sanba_sample_fSAN_cpp", (DL_FUNC) &_sanba_sample_fSAN_cpp, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_sanba(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
